name: 'Build and Release'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-tauri:
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' || 'x86_64-unknown-linux-gnu' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'FCA Manager ${{ github.ref_name }}'
          releaseBody: |
            ## 🚀 Nova Versão do FCA Manager
            
            ### Principais Mudanças
            -  Correção de bugs
            
            ### 📥 Como Instalar
            1. Baixe o arquivo apropriado para seu sistema operacional
            2. Execute o instalador
            3. O app será atualizado automaticamente nas próximas versões
            
            ### ⚠️ Notas Importantes
            - Esta versão inclui uma alteração na cor do texto das atividades pendentes
            - Backup dos dados recomendado antes da instalação
            
            ---
            **Checksum dos arquivos disponível nos Assets abaixo**
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true

  create-update-manifest:
    needs: build-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Get release info and app version
        id: release_info
        run: |
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          # Extract version from tauri.conf.json
          APP_VERSION=$(grep '"version"' src-tauri/tauri.conf.json | cut -d'"' -f4)
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Download release assets
        run: |
          # Wait for release to be created
          sleep 30
          
          # Get the signature file content
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.release_info.outputs.tag_name }}" \
            > release_info.json
          
          # Find Windows setup signature
          SIG_URL=$(jq -r '.assets[] | select(.name | contains("x64-setup.exe.sig")) | .browser_download_url' release_info.json)
          
          if [ "$SIG_URL" != "null" ] && [ -n "$SIG_URL" ]; then
            curl -L "$SIG_URL" > signature.txt
            SIGNATURE=$(cat signature.txt)
            echo "signature=${SIGNATURE}" >> $GITHUB_OUTPUT
          else
            echo "signature=" >> $GITHUB_OUTPUT
          fi
        id: get_signature
      
      - name: Create update manifest
        run: |
          cat > latest.json << EOF
          {
            "version": "${{ steps.release_info.outputs.app_version }}",
            "notes": "Nova versão do FCA Manager com melhorias e correções de bugs. O sistema de auto-update está ativo.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "${{ steps.get_signature.outputs.signature }}",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release_info.outputs.tag_name }}/FCA.Manager_${{ steps.release_info.outputs.app_version }}_x64-setup.exe"
              }
            }
          }
          EOF
      
      - name: Upload update manifest to release
        uses: softprops/action-gh-release@v1
        with:
          files: latest.json
          tag_name: ${{ steps.release_info.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}